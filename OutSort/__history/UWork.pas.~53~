unit UWork;

interface

uses
  UFile, StdCtrls, sysutils;


procedure PrintToMemo(s: string; Memo: TMemo);
procedure MakeRndFile(s: string; len: integer);
procedure MakeReversFile(s: string; len: integer);
function CheckFile(s: string; var len: integer): boolean;
procedure SortFile(s: string; var swp: integer; var see: integer);

implementation

procedure PrintToMemo(s: string; Memo: TMemo);
var
  f: file of integer;
  zn: integer;

begin
  Memo.Clear;
  assignfile(f,s);
  reset(f);
  Memo.Lines.Add('В файле '+inttostr(filesize(f))+' элементов:');
  while not eof(f) do
  begin
    read(f,zn);
    Memo.Lines.Add(inttostr(zn));
  end;
  closefile(f);
end;

procedure SortFile(s: string; var swp: integer; var see: integer);
var
  sourse: array [1 .. 2] of TFile;
  dest: array [1 .. 2] of TFile;
  isr, idest: integer; // номер выбранного файла
  kolsec: array [1 .. 2] of integer; // количество последовательностей в dest
  f: file of integer;
  flag: boolean;
  buf: TFile;

  procedure DefineDest;
  var
    elem, add,zn: integer;
    newkol: array[1..2] of integer;

    function FindMinElem: integer;
    begin
      result := MaxInt;
      if (sourse[1].Last < result) and (not sourse[1].EOSec) then
        result := sourse[1].Last;
      if (sourse[2].Last < result) and (not sourse[2].EOSec) then
        result := sourse[2].Last;
    end;

  begin
    elem := FindMinElem;
    if (dest[idest].EOFile) or (dest[idest].Last > elem) then
      add := 1
    else
      add := 0;
    newkol[1]:=kolsec[1];
    newkol[2]:=kolsec[2];
    newkol[idest]:=newkol[idest]+add;
    zn:=newkol[1]-newkol[2];
    if not ((zn>=0) and (zn<=1)) then idest:=3-idest;
    if (dest[idest].EOFile) or (dest[idest].Last > elem) then inc(kolsec[idest]); //изменяем количество последовательностей
  end;

  procedure WriteSec(Dest: TFile; var kol: integer);
  begin
    while (not Sourse[1].EOSec) and (not Sourse[2].EOSec) do
    begin
      if Sourse[1].Last<Sourse[2].Last then
        Sourse[1].Copy(Dest)
      else
        Sourse[2].Copy(Dest);
    end;
    Sourse[1].CopySec(Dest);
    Sourse[2].CopySec(Dest);
  end;

begin
  swp := 0;
  see := 0;
  Sourse[1]:=TFile.Create(s);
  Sourse[1].RenameFile('_temp1.tmp');
  sourse[1].OpenRead;

  assignfile(f, '_temp2.tmp');
  rewrite(f);
  close(f);
  sourse[2]:=TFile.Create('_temp2.tmp');
  sourse[2].OpenRead;

  dest[1]:=TFile.Create('_temp3.tmp');
  dest[1].OpenWrite;

  dest[2]:=TFile.Create('_temp4.tmp');
  dest[2].OpenWrite;

  idest := 1;
  flag := true;
  while flag do
  begin
    idest := 1;
    kolsec[1] := 0;
    kolsec[2] := 0;
    while (not sourse[1].EOFile) or (not sourse[2].EOFile) do
    begin
      DefineDest; //определили, куда будем писать очередную последовательность
      WriteSec(Dest[idest],kolsec[idest]);   //записали туда очередную последовательность
      Sourse[1].NextSec;
      Sourse[2].NextSec;
    end;
    sourse[1].CloseTFile;
    sourse[2].CloseTFile;
    dest[1].CloseTFile;
    dest[2].CloseTFile;

    buf:=sourse[1];
    sourse[1]:=dest[1];
    dest[1]:=buf;

    buf:=sourse[2];
    sourse[2]:=dest[2];
    dest[2]:=buf;

    if sourse[2].IsEmpty then flag:=false else
    begin
      sourse[1].OpenRead;
      sourse[2].OpenRead;
      dest[1].OpenWrite;
      dest[2].OpenWrite;
    end;
  end;
  Sourse[1].RenameFile(s);
  Sourse[2].DeleteTFile;
  Dest[1].DeleteTFile;
  Dest[2].DeleteTFile;

  Sourse[1].Destroy;
  Sourse[2].Destroy;
  Dest[1].Destroy;
  Dest[2].Destroy;
end;

procedure MakeRndFile(s: string; len: integer);
var
  f: file of integer;
  zn, i: integer;

begin
  assignfile(f, s);
  rewrite(f);
  for i := 1 to len do
  begin
    zn := Random(200000) - 100000;
    write(f, zn);
  end;
  closefile(f);
end;

procedure MakeReversFile(s: string; len: integer);
var
  f: file of integer;
  i: integer;

begin
  assignfile(f, s);
  rewrite(f);
  for i := len downto 1 do
    write(f, i);
  closefile(f);
end;

function CheckFile(s: string; var len: integer): boolean;
var
  f: file of integer;
  prev, cur: integer;

begin
  result := true;
  len := filesize(f);
  read(f, prev);
  while (not eof(f)) and result do
  begin
    read(f, cur);
    if prev > cur then
      result := false;
  end;
end;

initialization

begin
  Randomize;
end;

end.
